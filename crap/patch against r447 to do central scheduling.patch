Index: Classes/Models/Board.m
===================================================================
--- Classes/Models/Board.m	(revision 447)
+++ Classes/Models/Board.m	(working copy)
@@ -13,8 +13,6 @@
 @interface Board()
 #pragma mark Game logic
 -(void)updateScores;
--(void)scheduleWinningConditionCheck;
--(void)checkWinningCondition:(NSTimer*)sender;
 -(void)advancePlayer;
 
 -(void)scheduleCharge:(Tile*)t owner:(Player)owner;
@@ -54,9 +52,6 @@
     self.tinyGame = NO;
     
     explosionsQueue = [[NSMutableDictionary alloc] init];
-    chargeTimer = [[NSTimer scheduledTimerWithTimeInterval:1./40. target:self selector:@selector(update) userInfo:nil repeats:YES] retain];
-
-    [self scheduleWinningConditionCheck];
     
     return self;
 }
@@ -82,8 +77,8 @@
     self.chaosGame = other.chaosGame;
     self.tinyGame = other.tinyGame;
     
-    // Why no timer nor explosions queue? because this method is used for making
-    // a board for the AI, which uses neither. Should rename the method to reflect
+    // Why no explosions queue? because this method is used for making
+    // a board for the AI, which doesn't use it. Should rename the method to reflect
     // this, I know...
     
     return self;
@@ -97,8 +92,6 @@
 }
 -(void)dealloc;
 {
-    [winningConditionTimer invalidate]; 
-    [chargeTimer invalidate]; [chargeTimer release]; chargeTimer = nil;
     [explosionsQueue release]; explosionsQueue = nil;
 
     for(NSUInteger y = 0; y < HeightInTiles; y++) 
@@ -115,25 +108,15 @@
     if(delegate)
         [delegate board:self changedScores:self.scores];
 }
--(void)scheduleWinningConditionCheck;
+-(void)checkWinningCondition;
 {
-    [winningConditionTimer invalidate];
-    winningConditionTimer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(checkWinningCondition:) userInfo:nil repeats:YES];
-}
--(void)checkWinningCondition:(NSTimer*)sender;
-{
-    Player winner = [self tile:BoardPointMake(0, 0)].owner;
-    if(winner == PlayerNone) return;
+    if(gameEnded) return;
     
-    for(NSUInteger y = 0; y < self.sizeInTiles.height; y++) {
-        for (NSUInteger x = 0; x < self.sizeInTiles.width; x++) {
-            Tile *tile = [self tile:BoardPointMake(x, y)];
-            if(tile.owner != winner)
-                return;
-        }
-    }
+    Player winner = [self winner]; 
+    if(winner == PlayerNone) return;
+
     gameEnded = YES;
-    [winningConditionTimer invalidate]; winningConditionTimer = nil;
+
     [delegate board:self endedWithWinner:winner];    
 }
 -(void)advancePlayer;
@@ -167,7 +150,6 @@
 
 -(Player)winner;
 {
-    //return gameEnded;
     Player winner = [self tile:BoardPointMake(0, 0)].owner;
     if(winner == PlayerNone) return PlayerNone;
     
@@ -183,7 +165,7 @@
 }
 -(BOOL)hasEnded;
 {
-    return self.winner;
+    return self.winner != PlayerNone;
 }
 -(BOOL)canMakeMoveNow;
 {
@@ -226,7 +208,6 @@
             [self performSelector:@selector(_zeroTile:) withObject:tile afterDelay:frand(0.5)];
         }
     }
-    [self scheduleWinningConditionCheck];
     
     id selfProxy = [[CInvocationGrabber invocationGrabber] prepareWithInvocationTarget:self];
     [selfProxy setCurrentPlayer:PlayerP1];
@@ -381,6 +362,15 @@
 }
 -(void)update;
 {
+    static NSTimeInterval lastWinUpdate = 0;
+    static const NSTimeInterval winUpdateDt = 1.;
+    NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];
+    
+    if(lastWinUpdate + winUpdateDt < now) {
+        [self checkWinningCondition];
+        lastWinUpdate = now;
+    }
+    
     if([explosionsQueue count] == 0)
         return;
     
Index: Classes/Models/Board.h
===================================================================
--- Classes/Models/Board.h	(revision 447)
+++ Classes/Models/Board.h	(working copy)
@@ -27,7 +27,6 @@
 @interface Board : NSObject <NSCopying>{
     Tile *boardTiles[10][12]; // [x][y]
     Player currentPlayer;
-    NSTimer *winningConditionTimer;
     BOOL gameEnded;
     
     BOOL chaosGame;
@@ -37,12 +36,14 @@
     
     NSUInteger explosionsQueued;
     NSMutableDictionary *explosionsQueue;
-    NSTimer *chargeTimer;
 }
 -(id)init;
 -(id)initWithBoard:(Board*)other;
 - (id)copyWithZone:(NSZone *)zone;
 
+// heartbeat
+-(void)update;
+
 #pragma mark Accessors
 -(Tile*)tile:(BoardPoint)point;
 -(BOOL)isBoardEmpty;
Index: Classes/Other Sources/Texture2D.h
===================================================================
--- Classes/Other Sources/Texture2D.h	(revision 441)
+++ Classes/Other Sources/Texture2D.h	(working copy)
@@ -53,14 +53,14 @@
 -(GLuint)frameRow;
 -(void)setFrameRow:(int)row col:(int)col;
 
-@property(readonly) Texture2DPixelFormat pixelFormat;
-@property(readonly) NSUInteger pixelsWide;
-@property(readonly) NSUInteger pixelsHigh;
+@property(readonly, nonatomic) Texture2DPixelFormat pixelFormat;
+@property(readonly, nonatomic) NSUInteger pixelsWide;
+@property(readonly, nonatomic) NSUInteger pixelsHigh;
 
-@property(readonly) GLuint name;
+@property(readonly, nonatomic) GLuint name;
 
 @property(readonly, nonatomic) CGSize contentSize;
-@property(readonly) CGPoint frameCount; 
+@property(readonly, nonatomic) CGPoint frameCount; 
 
 @end
 
Index: Classes/Game Views/BoardViewController.m
===================================================================
--- Classes/Game Views/BoardViewController.m	(revision 443)
+++ Classes/Game Views/BoardViewController.m	(working copy)
@@ -13,6 +13,12 @@
 #import "AI2.h"
 #import "AIMinMax.h"
 #import "Beacon+OptIn.h"
+
+@interface BoardViewController ()
+@property (retain, nonatomic) NSTimer *heartbeat;
+@end
+
+
 @implementation BoardViewController
 
 #pragma mark Initialization and memory management
@@ -47,12 +53,15 @@
     
     self.view.autoresizingMask = UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;
     
+    
     if([[NSUserDefaults standardUserDefaults] boolForKey:@"currentGame.hasAI"])
         [self startAI];
 }
 
 - (void)viewDidAppear:(BOOL)animated; 
 {
+    self.heartbeat = [NSTimer scheduledTimerWithTimeInterval:1./60. target:self selector:@selector(update) userInfo:nil repeats:YES];
+
     if(!boardView) {
         boardView = [[[BoardView alloc] initWithFrame:CGRectMake(0, ScoreBarHeight, BoardWidth, BoardHeight())] autorelease];
         [boardView setSizeInTiles:board.sizeInTiles];
@@ -65,6 +74,7 @@
 }
 - (void)viewDidDisappear:(BOOL)animated;
 {
+    self.heartbeat = nil;
     boardView.animated = NO;
 }
 
@@ -81,12 +91,44 @@
 }
 
 - (void)dealloc {
+    self.heartbeat = nil;
     [board release];
     [soundPlayer release];
     [ai release];
 	[super dealloc];
 }
 
+#pragma mark Hearbeat
+@synthesize heartbeat;
+-(void)setHearbeat:(NSTimer*)heartbeat_;
+{
+    if(heartbeat != heartbeat_)
+        [heartbeat invalidate];
+    [heartbeat_ retain];
+    [heartbeat release];
+    heartbeat = heartbeat_;
+}
+
+-(void)update;
+{
+    static NSTimeInterval lastBoardUpdate = 0;
+    static NSTimeInterval lastViewUpdate = 0;
+    
+    static const NSTimeInterval boardUpdateDt = 1./10.;
+    static const NSTimeInterval viewUpdateDt = 1./60.;
+    
+    NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];
+    if(lastBoardUpdate + boardUpdateDt < now) {
+        [board update];
+        lastBoardUpdate = now;
+    }
+    if(lastViewUpdate + viewUpdateDt < now) {
+        [boardView render];
+        lastViewUpdate = now;
+    }
+}
+
+
 #pragma mark Board delegates
 -(void)tile:(Tile*)tile changedOwner:(Player)owner;
 {
Index: Classes/Game Views/BoardGL/BoardViewGL.m
===================================================================
--- Classes/Game Views/BoardGL/BoardViewGL.m	(revision 448)
+++ Classes/Game Views/BoardGL/BoardViewGL.m	(working copy)
@@ -16,8 +16,6 @@
 -(BOOL)createFramebuffer;
 -(void)destroyFramebuffer;
 -(void)prepareScene;
--(void)render;
-@property (nonatomic, assign) NSTimer *animationTimer;
 @property (retain) Texture2D *gloss;
 @property (retain) Texture2D *t0;
 @property (retain) Texture2D *t25;
@@ -54,9 +52,7 @@
 -(id)initWithFrame:(CGRect)frame;
 {
     if( ! [super initWithFrame:frame] ) return nil;
-    
-    animationInterval = 1.0/40.0;
-    
+        
     memset(&board, 0, sizeof(board));
     
     explosions = [[NSMutableArray alloc] init];
@@ -385,32 +381,14 @@
     [explosions removeObject:ex];
 }
 
-@synthesize animationTimer;
--(void)setAnimationTimer:(NSTimer*)animationTimer_;
-{
-    [animationTimer invalidate];
-    [animationTimer_ retain];
-    [animationTimer release];
-    animationTimer = animationTimer_;
-}
--(BOOL)animated;
-{
-    return animationTimer != nil;
-}
--(void)setAnimated:(BOOL)animate_;
-{
-    if(!self.animated && animate_) {
-        [self.animationTimer invalidate];
-        self.animationTimer = [NSTimer scheduledTimerWithTimeInterval:animationInterval target:self selector:@selector(render) userInfo:nil repeats:YES];
-    } else if(self.animated && !animate_)
-        self.animationTimer = nil;
-}
 
 @synthesize sizeInTiles;
 @synthesize delegate;
 @synthesize tileSize;
 
 @synthesize gloss, t0, t25, t50, t75;
+-(BOOL)animated; { return YES; } // nops, not needed in GL version
+-(void)setAnimated:(BOOL)_; {}
 @end
 
 #pragma mark 
Index: Classes/Game Views/BoardGL/BoardView.h
===================================================================
--- Classes/Game Views/BoardGL/BoardView.h	(revision 441)
+++ Classes/Game Views/BoardGL/BoardView.h	(working copy)
@@ -36,8 +36,6 @@
     GLuint fbo, rbo;
     Texture2D *gloss, *t0, *t25, *t50, *t75;
     
-    NSTimer *animationTimer;
-    NSTimeInterval animationInterval;
     BoardStruct board;
     
     NSMutableArray *explosions;
@@ -48,6 +46,9 @@
 -(void)setOwner:(Player)player atPosition:(BoardPoint)p;
 -(void)explode:(BoardPoint)explodingTile;
 
+// heartbeat
+-(void)render;
+
 @property (assign, nonatomic) BOOL animated;
 
 @property (assign, nonatomic) BoardSize sizeInTiles;
Index: Classes/Game Views/BoardViewController.h
===================================================================
--- Classes/Game Views/BoardViewController.h	(revision 427)
+++ Classes/Game Views/BoardViewController.h	(working copy)
@@ -19,13 +19,15 @@
 
 @interface BoardViewController : UIViewController <BoardDelegate, BoardViewDelegate, ScoreBarViewDelegate> {
     ScoreBarView *score1, *score2;
-    BoardView *boardView;
     UIImageView *winPlaque, *losePlaque;
     
     OLSoundPlayer *soundPlayer;
     
+    BoardView *boardView;
     Board *board;
     
+    NSTimer *heartbeat;
+    
     AI *ai;
 #ifdef AI_VS_AI
     AI*ai2;
